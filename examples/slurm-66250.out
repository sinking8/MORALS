/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.encoder = torch.load(os.path.join(config['model_dir'], 'encoder.pt'), map_location=self.device)
/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.decoder = torch.load(os.path.join(config['model_dir'], 'decoder.pt'), map_location=self.device)
/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:30: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.dynamics = torch.load(os.path.join(config['model_dir'], 'dynamics.pt'), map_location=self.device)
Bounds for decoded space [-0.33000001311302185, 0.0, -2.007962703704834, -0.33000001311302185, 0.0, -2.700000047683716, -0.33000001311302185, 0.0, -2.0799708366394043, -0.3970000147819519, -0.3970000147819519, -0.3934100270271301, -0.3970000147819519, -0.3970000147819519, -0.35562485456466675, -0.3970000147819519, -0.3970000147819519, -0.395555704832077, -0.19693081080913544, -0.11134086549282074, 0.0, -0.16531464457511902, -0.20927448570728302, 0.002173459390178323, -0.2626819610595703, -0.20262594521045685, 0.0, -1.4885133504867554, -2.148667335510254, -1.1938438415527344, -1.6768627166748047, -1.3259432315826416, -1.0077755451202393, -1.5346260070800781, -1.497923493385315, -1.0113739967346191, -4.811441421508789, -6.132253170013428, -6.5867156982421875, -5.417351722717285, -5.258795738220215, -6.212841510772705, -5.502103328704834, -5.907792091369629, -6.432033538818359, 0.007568359375, 0.086181640625, 0.03173828125, -0.30000001192092896, -0.30000001192092896, 0.0, -0.13781236112117767, -0.13673757016658783, -0.9675000011920929] [0.9941378235816956, 1.442670464515686, 0.0, 0.9757609367370605, 1.3279107809066772, 0.0, 1.0, 1.5700000524520874, -0.1108665019273758, 0.3970000147819519, 0.3970000147819519, 0.3970000147819519, 0.3970000147819519, 0.3970000147819519, 0.3272639214992523, 0.3970000147819519, 0.3970000147819519, 0.37241488695144653, 0.1857490986585617, 0.19958649575710297, 0.15513837337493896, 0.181054949760437, 0.15773974359035492, 0.20994701981544495, 0.13756851851940155, 0.18127499520778656, 0.16791629791259766, 1.2763065099716187, 2.335731029510498, 1.0373473167419434, 1.528893232345581, 1.3323596715927124, 1.167349934577942, 1.6181994676589966, 1.5939582586288452, 0.9851890802383423, 5.951459884643555, 6.362009525299072, 8.903589248657227, 5.156849384307861, 5.188056945800781, 5.439642429351807, 5.514935493469238, 5.85479736328125, 7.050473690032959, 0.99853515625, 0.999755859375, 0.989501953125, 0.30000001192092896, 0.30000001192092896, 0.30000001192092896, 0.13795210421085358, 0.13815848529338837, 1.032499998807907]
Bounds for encoded space [-1, -1] [1, 1]
data on the latent space (262144, 2)
[-0.14343984 -0.00908353]
output/trifinger_learned_b/2trifinger
4:24:13.815583
Compute_Morse_Graph. Initializing root MorseDecomposition
Compute_Morse_Graph. A phase_space -> size () == 65536
Compute_Morse_Graph. B phase_space -> size () == 65536
Total Grid Memory (can be external) = 4981006
Max Memory For Single Grid (must be internal)= 4981006
Max SCC Random Access memory use (must be internal)= 557056
Max SCC stack memory use (can be external memory) = 28016
 ---- SUMMARY ---- 
Internal Memory Requirement = 5538062
External Memory Requirement = 5009022
Max graph memory size (never stored, however) = 8021096
Traceback (most recent call last):
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/backend/execute.py", line 78, in run_check
    proc = subprocess.run(cmd, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: PosixPath('dot')

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/nas/home/ashwinb/robotic_manipulation/MORALS/examples/get_MG_RoA.py", line 204, in <module>
    main(args, config, experiment_name)
  File "/nas/home/ashwinb/robotic_manipulation/MORALS/examples/get_MG_RoA.py", line 174, in main
    morse_graph, map_graph = MG_util.run_CMGDB(
                             ^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/dytop/CMGDB_util.py", line 132, in run_CMGDB
    CMGDB.PlotMorseGraph(morse_graph, cmap).render(MG)
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/_tools.py", line 171, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/rendering.py", line 122, in render
    rendered = self._render(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/_tools.py", line 171, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/backend/rendering.py", line 326, in render
    execute.run_check(cmd,
  File "/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/graphviz/backend/execute.py", line 81, in run_check
    raise ExecutableNotFound(cmd) from e
graphviz.backend.execute.ExecutableNotFound: failed to execute PosixPath('dot'), make sure the Graphviz executables are on your systems' PATH
