/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.encoder = torch.load(os.path.join(config['model_dir'], 'encoder.pt'), map_location=self.device)
/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.decoder = torch.load(os.path.join(config['model_dir'], 'decoder.pt'), map_location=self.device)
/nas/home/ashwinb/miniconda3/envs/morals/lib/python3.11/site-packages/MORALS/dynamics_utils.py:30: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.dynamics = torch.load(os.path.join(config['model_dir'], 'dynamics.pt'), map_location=self.device)
Bounds for decoded space [-3.141592653589793, -6.283185307179586] [3.141592653589793, 6.283185307179586]
Bounds for encoded space [-1, -1] [1, 1]
dataset
Getting data for:  pendulum
  0%|          | 0/1024 [00:00<?, ?it/s]  2%|▏         | 19/1024 [00:00<00:05, 182.06it/s]  4%|▎         | 38/1024 [00:00<00:06, 142.19it/s]  5%|▌         | 56/1024 [00:00<00:06, 154.03it/s]  7%|▋         | 73/1024 [00:00<00:06, 158.29it/s]  9%|▉         | 90/1024 [00:00<00:05, 160.97it/s] 10%|█         | 107/1024 [00:00<00:05, 153.01it/s] 12%|█▏        | 123/1024 [00:00<00:05, 150.71it/s] 14%|█▎        | 140/1024 [00:00<00:05, 153.85it/s] 15%|█▌        | 156/1024 [00:01<00:05, 147.19it/s] 17%|█▋        | 172/1024 [00:01<00:05, 148.83it/s] 18%|█▊        | 187/1024 [00:01<00:06, 137.64it/s] 20%|█▉        | 201/1024 [00:01<00:06, 129.12it/s] 21%|██        | 215/1024 [00:01<00:06, 130.35it/s] 23%|██▎       | 231/1024 [00:01<00:05, 138.45it/s] 24%|██▍       | 249/1024 [00:01<00:05, 147.92it/s] 26%|██▌       | 266/1024 [00:01<00:04, 153.73it/s] 28%|██▊       | 283/1024 [00:01<00:04, 157.14it/s] 29%|██▉       | 299/1024 [00:02<00:04, 156.14it/s] 31%|███       | 315/1024 [00:02<00:04, 151.96it/s] 32%|███▏      | 331/1024 [00:02<00:04, 153.93it/s] 34%|███▍      | 348/1024 [00:02<00:04, 156.87it/s] 36%|███▌      | 365/1024 [00:02<00:04, 160.25it/s] 37%|███▋      | 383/1024 [00:02<00:03, 163.45it/s] 39%|███▉      | 401/1024 [00:02<00:03, 166.14it/s] 41%|████      | 419/1024 [00:02<00:03, 168.98it/s] 43%|████▎     | 436/1024 [00:02<00:04, 142.78it/s] 44%|████▍     | 451/1024 [00:03<00:04, 135.14it/s] 46%|████▌     | 466/1024 [00:03<00:04, 137.31it/s] 47%|████▋     | 482/1024 [00:03<00:03, 141.33it/s] 49%|████▊     | 499/1024 [00:03<00:03, 147.02it/s] 50%|█████     | 517/1024 [00:03<00:03, 154.45it/s] 52%|█████▏    | 534/1024 [00:03<00:03, 157.75it/s] 54%|█████▍    | 551/1024 [00:03<00:02, 160.49it/s] 55%|█████▌    | 568/1024 [00:03<00:02, 155.29it/s] 57%|█████▋    | 584/1024 [00:03<00:02, 155.09it/s] 59%|█████▊    | 600/1024 [00:03<00:02, 154.77it/s] 60%|██████    | 616/1024 [00:04<00:02, 153.49it/s] 62%|██████▏   | 632/1024 [00:04<00:02, 153.29it/s] 63%|██████▎   | 649/1024 [00:04<00:02, 156.37it/s] 65%|██████▍   | 665/1024 [00:04<00:02, 147.95it/s] 66%|██████▋   | 680/1024 [00:04<00:02, 145.23it/s] 68%|██████▊   | 696/1024 [00:04<00:02, 147.23it/s] 70%|██████▉   | 713/1024 [00:04<00:02, 152.04it/s] 71%|███████   | 729/1024 [00:04<00:02, 145.82it/s] 73%|███████▎  | 744/1024 [00:04<00:02, 128.51it/s] 74%|███████▍  | 758/1024 [00:05<00:02, 128.88it/s] 75%|███████▌  | 772/1024 [00:05<00:01, 127.12it/s] 77%|███████▋  | 791/1024 [00:05<00:01, 142.43it/s] 79%|███████▉  | 809/1024 [00:05<00:01, 150.70it/s] 81%|████████  | 827/1024 [00:05<00:01, 157.47it/s] 82%|████████▏ | 844/1024 [00:05<00:01, 160.23it/s] 84%|████████▍ | 862/1024 [00:05<00:00, 163.70it/s] 86%|████████▌ | 879/1024 [00:05<00:00, 154.87it/s] 88%|████████▊ | 896/1024 [00:05<00:00, 158.97it/s] 89%|████████▉ | 913/1024 [00:06<00:00, 157.70it/s] 91%|█████████ | 929/1024 [00:06<00:00, 129.94it/s] 92%|█████████▏| 945/1024 [00:06<00:00, 136.48it/s] 94%|█████████▍| 960/1024 [00:06<00:00, 129.57it/s] 96%|█████████▌| 978/1024 [00:06<00:00, 140.96it/s] 97%|█████████▋| 995/1024 [00:06<00:00, 148.20it/s] 99%|█████████▉| 1012/1024 [00:06<00:00, 152.06it/s]100%|██████████| 1024/1024 [00:06<00:00, 149.22it/s]
Hello
data on the latent space (20480, 2)
[-0.57034767 -0.12467596]
/nas/home/ashwinb/robotic_manipulation/MORALS/experiments/output/pendulum/pendulum_lqr1k_2out_exp
0:06:06.572175
Time to build the regions of attraction = 0:02:55.592287
dictionary with volume of all Morse tiles = {1: 0.13177490234375, 3: 0.07000732421875, 5: 0.00665283203125, 6: 0.141357421875, 2: 0.0374755859375, 7: 0.01605224609375, 0: 0.02099609375, 8: 0.00189208984375, 4: 0.00018310546875, 9: 0.00018310546875, 10: 0.0001220703125, 11: 0.0006103515625}
Compute_Morse_Graph. Initializing root MorseDecomposition
Compute_Morse_Graph. A phase_space -> size () == 65536
Compute_Morse_Graph. B phase_space -> size () == 65536
Total Grid Memory (can be external) = 4981006
Max Memory For Single Grid (must be internal)= 4981006
Max SCC Random Access memory use (must be internal)= 557056
Max SCC stack memory use (can be external memory) = 47488
 ---- SUMMARY ---- 
Internal Memory Requirement = 5538062
External Memory Requirement = 5028494
Max graph memory size (never stored, however) = 3527384
